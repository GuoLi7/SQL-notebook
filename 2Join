-- inner joins 内连接 + 简写
SELECT order_id, o.customer_id, first_name
FROM orders o 
JOIN customers c
    ON o.customer_id=c.customer_id;
 
-- joining across database 
SELECT *
FROM order_items oi
JOIN sql_inventory.products p
    ON oi.product_id=p.product_id;
    
-- self joins 
USE sql_hr;
SELECT e.employee_id, e.first_name AS employee_first_name,
       m.first_name AS manager 
FROM employees e
JOIN employees m
    ON e.reports_to=m.employee_id;
    
-- join multiple tables
USE sql_store;
SELECT 
     o.order_id,
     o.order_date,
     c.first_name,
     c.last_name,
     os.name AS status
FROM orders o
JOIN customers c
     ON o.customer_id=c.customer_id 
JOIN order_statuses os
     ON o.status=os.order_status_id;

-- compound join condition 复合连接方式
-- implicit join syntax 隐式连接语法 不建议用 
SELECT *
FROM orders o, customers c
WHERE o.customer_id=c.customer_id;

-- outer joins 外连接包含left join 和right join 
-- left join 左边的表全部返回+包含 on部分返回
SELECT 
   p.product_id,
   p.name,
   o.quantity
FROM  order_items o
RIGHT JOIN products p
          ON p.product_id=o.product_id;
  
  -- outer joins between multiple tables 
SELECT 
    o.order_date,
    o.order_id,
    c.first_name,
    s.name AS shipper,
    os.name AS status
FROM orders o
JOIN customers c
    ON o.customer_id=c.customer_id
LEFT JOIN shippers s
    ON o.shipper_id=s.shipper_id
LEFT JOIN order_statuses os
    ON os.order_status_id=o.status
ORDER BY status;

-- self outer joins 自外连接
SELECT
    e.employee_id,
    e.first_name AS employee,
    m.first_name AS manager 
FROM employees e
LEFT JOIN   employees m
    ON e.reports_to=m.employee_id;
    
-- USING clause using子句
-- 如果index的名称在两个表之间一样 用using
SELECT
    o.order_id
    c_first_name
FROM orders o
JOIN customers c 
    -- ON o.customer_id=c.customer_id
    USING (customer_id);
    
-- natural joins 不推荐 让表自己看着办的join方法
SELECT
    o.order_id,
    c.first_name
FROM orders o 
NATURAL JOIN customers c

-- cross join 交叉连接 卡迪尔积
-- SELECT/FROM/ CROSS JOIN

-- unions 联合
SELECT 
   customer_id, 
   first_name,
   points,
   "Bronze" AS type
FROM customers
WHERE points<=2000
UNION
SELECT 
   customer_id, 
   first_name,
   points,
   "Silver" AS type
FROM customers
WHERE points BETWEEN 2000 AND 3000
UNION 
SELECT 
   customer_id, 
   first_name,
   points,
   "Gold" AS type
FROM customers
WHERE points> 3000
ORDER BY first_name;

-- inserting a row 插入单行
INSERT INTO customers
VALUES ( DEFAULT, "Grace", "Lee", "2000-7-18", NULL, "address", "city" ,"UK", 8888);

-- -- inserting multiple row 插入多行
INSERT INTO products (name,quantity_in_stock,unit_price)
VALUES('Shipper1', 10, 1.95),
      ('Shipper2', 10, 1.95),
	  ('Shipper3', 10, 1.95);
      
-- inserting hierarchical rows插入分层行 在多张表中插入数据
INSERT INTO orders (customer_id,order_date,status )
VALUES (1,'2020-01-02', 1);

INSERT INTO order_items
VALUES (LAST_INSERT_ID(),1,1,2.5),
	   (LAST_INSERT_ID(),2,1,2.5);
       
-- creating a copy of a table 复制表内容建新表
-- CREATE TABLE orders_archived AS
-- SELECT * FROM orders
SELECT *
FROM orders
WHERE order_date <'2019-01-01';

CREATE TABLE invoices_archived AS
SELECT
    i.invoice_id,
    i.number,
    c.name AS client,
	i.invoice_total,
    i.payment_total,
    i.invoice_date,
    i.due_date,
    i.payment_date
FROM invoices i
JOIN  clients c
   USING (client_id)
WHERE  payment_date IS NOT null

